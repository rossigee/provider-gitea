# Complete Gitea Infrastructure Setup Example
# This demonstrates all managed resources working together for a complete CI/CD workflow

# 1. Create Organization
apiVersion: organization.gitea.crossplane.io/v1alpha1
kind: Organization
metadata:
  name: infrastructure-org
  annotations:
    crossplane.io/external-name: infrastructure
spec:
  forProvider:
    username: infrastructure
    name: "Infrastructure Team"
    fullName: "Infrastructure and DevOps Team"
    description: "Organization for infrastructure and DevOps repositories"
    website: "https://infra.golder.lan"
    location: "Global"
    visibility: public
    repoAdminChangeTeamAccess: false
  providerConfigRef:
    name: default

---
# 2. Create Repository for provider-gitea
apiVersion: repository.gitea.crossplane.io/v1alpha1
kind: Repository
metadata:
  name: provider-gitea-repo
  annotations:
    crossplane.io/external-name: provider-gitea
spec:
  forProvider:
    name: provider-gitea
    owner: infrastructure
    description: "Crossplane provider for Gitea API management"
    private: false
    autoInit: true
    defaultBranch: master
    hasIssues: true
    hasWiki: true
    hasPullRequests: true
    hasActions: true
    allowMergeCommits: true
    allowRebase: true
    allowSquashMerge: true
    license: Apache-2.0
    gitignores: Go
  providerConfigRef:
    name: default

---
# 3. Create CI/CD User for automated operations
apiVersion: user.gitea.crossplane.io/v1alpha1
kind: User
metadata:
  name: ci-user
  annotations:
    crossplane.io/external-name: gitea-ci
spec:
  forProvider:
    username: gitea-ci
    email: ci@infra.golder.lan
    password: "AutoGeneratedSecurePassword123!"
    fullName: "Gitea CI/CD Bot"
    sendNotify: false
    mustChangePassword: false
    restricted: false
    visibility: private
  providerConfigRef:
    name: default

---
# 4. Create Deploy Key for CI/CD access
apiVersion: deploykey.gitea.crossplane.io/v1alpha1
kind: DeployKey
metadata:
  name: ci-deploy-key
  annotations:
    crossplane.io/external-name: "infrastructure-ci-key"
spec:
  forProvider:
    repository: provider-gitea
    owner: infrastructure
    title: "Infrastructure CI/CD Deploy Key"
    key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7yn3bGHSTuKwIVKE... ci@infra.golder.lan"
    readOnly: false  # Allow write access for CI operations
  providerConfigRef:
    name: default

---
# 5. Create Organization Secrets for Harbor integration
apiVersion: organizationsecret.gitea.crossplane.io/v1alpha1
kind: OrganizationSecret
metadata:
  name: harbor-registry
  annotations:
    crossplane.io/external-name: HARBOR_REGISTRY
spec:
  forProvider:
    organization: infrastructure
    secretName: HARBOR_REGISTRY
    data: "harbor.infra.golder.lan"
  providerConfigRef:
    name: default

---
apiVersion: organizationsecret.gitea.crossplane.io/v1alpha1
kind: OrganizationSecret
metadata:
  name: harbor-credentials
  annotations:
    crossplane.io/external-name: HARBOR_ROBOT_TOKEN
spec:
  forProvider:
    organization: infrastructure
    secretName: HARBOR_ROBOT_TOKEN
    dataFrom:
      secretKeyRef:
        name: harbor-robot-credentials
        namespace: gitea-secrets
        key: robot-token
  providerConfigRef:
    name: default

---
apiVersion: organizationsecret.gitea.crossplane.io/v1alpha1
kind: OrganizationSecret
metadata:
  name: docker-project
  annotations:
    crossplane.io/external-name: DOCKER_PROJECT
spec:
  forProvider:
    organization: infrastructure
    secretName: DOCKER_PROJECT
    data: "crossplane-providers"
  providerConfigRef:
    name: default

---
# 6. Create Webhook for automated builds
apiVersion: webhook.gitea.crossplane.io/v1alpha1
kind: Webhook
metadata:
  name: harbor-build-webhook
spec:
  forProvider:
    repository: provider-gitea
    owner: infrastructure
    url: "https://ci.infra.golder.lan/webhook/gitea/build"
    type: gitea
    contentType: json
    active: true
    events:
      - push
      - pull_request
      - tag
    secret: "webhook-secret-for-ci-validation"
    sslVerification: true
  providerConfigRef:
    name: default
