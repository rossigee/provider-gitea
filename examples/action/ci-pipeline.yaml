# CI/CD Pipeline workflow using Gitea Actions
# This example creates a comprehensive build and deployment pipeline
apiVersion: action.gitea.crossplane.io/v1alpha1
kind: Action
metadata:
  name: ci-pipeline-workflow
  annotations:
    crossplane.io/external-name: "example-org/webapp/ci-pipeline.yml"
spec:
  forProvider:
    # Repository in owner/name format
    repository: "example-org/webapp"
    
    # Workflow file name
    workflowName: "ci-pipeline.yml"
    
    # Target branch
    branch: "main"
    
    # Commit message
    commitMessage: "Add CI/CD pipeline via Crossplane"
    
    # Complete workflow YAML content
    content: |
      name: CI/CD Pipeline
      
      on:
        push:
          branches: [ main, develop ]
        pull_request:
          branches: [ main ]
      
      jobs:
        test:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v3
            
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '18'
                cache: 'npm'
            
            - name: Install dependencies
              run: npm ci
            
            - name: Run tests
              run: npm test
            
            - name: Run ESLint
              run: npm run lint
            
            - name: Build application
              run: npm run build
        
        security-scan:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v3
            
            - name: Run security audit
              run: npm audit
            
            - name: Dependency vulnerability scan
              run: npm audit --audit-level moderate
        
        deploy:
          needs: [test, security-scan]
          runs-on: ubuntu-latest
          if: github.ref == 'refs/heads/main'
          steps:
            - uses: actions/checkout@v3
            
            - name: Build Docker image
              run: |
                docker build -t webapp:${{ github.sha }} .
                docker tag webapp:${{ github.sha }} registry.company.com/webapp:latest
            
            - name: Push to registry
              env:
                DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
              run: |
                echo $DOCKER_PASSWORD | docker login registry.company.com -u deploy --password-stdin
                docker push registry.company.com/webapp:${{ github.sha }}
                docker push registry.company.com/webapp:latest
            
            - name: Deploy to staging
              run: |
                curl -X POST https://deploy.company.com/webhook \
                  -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
                  -d '{"image": "registry.company.com/webapp:${{ github.sha }}", "environment": "staging"}'
      
  providerConfigRef:
    name: default