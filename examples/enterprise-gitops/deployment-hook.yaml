apiVersion: githook.gitea.crossplane.io/v1alpha1
kind: GitHook
metadata:
  name: enterprise-deployment-hook
  annotations:
    crossplane.io/external-name: acme-corp/platform-services/post-receive
spec:
  forProvider:
    repository: acme-corp/platform-services
    hookType: post-receive
    isActive: true
    content: |
      #!/bin/bash
      # Enterprise Git Post-receive Hook
      # Implements automated deployment and notification workflows
      
      set -e
      
      # Configuration
      CI_WEBHOOK_URL="${CI_WEBHOOK_URL:-https://ci.acme-corp.com/webhook/git}"
      SLACK_WEBHOOK_URL="${SLACK_WEBHOOK_URL:-https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX}"
      DEPLOYMENT_BRANCHES="main|master|release/*"
      
      while read oldrev newrev refname; do
          echo "=== Processing push to $refname ==="
          
          # Extract branch and commit info
          branch_name=$(echo $refname | sed 's/refs\/heads\///')
          commit_msg=$(git log -1 --format="%s" $newrev)
          commit_author=$(git log -1 --format="%an <%ae>" $newrev)
          commit_hash=$(echo $newrev | cut -c1-8)
          
          echo "Branch: $branch_name"
          echo "Commit: $commit_hash - $commit_msg"
          echo "Author: $commit_author"
          
          # 1. Trigger CI/CD pipeline for deployment branches
          if echo "$branch_name" | grep -qE "$DEPLOYMENT_BRANCHES"; then
              echo "üöÄ Triggering deployment pipeline for $branch_name"
              
              # Send webhook to CI/CD system
              curl -s -X POST "$CI_WEBHOOK_URL" \
                -H "Content-Type: application/json" \
                -H "X-Gitea-Event: push" \
                -d '{
                  "repository": {
                    "full_name": "acme-corp/platform-services",
                    "clone_url": "https://gitea.acme-corp.com/acme-corp/platform-services.git"
                  },
                  "ref": "'$refname'",
                  "before": "'$oldrev'",
                  "after": "'$newrev'",
                  "commits": [{
                    "id": "'$newrev'",
                    "message": "'$commit_msg'",
                    "author": {
                      "name": "'$(git log -1 --format="%an" $newrev)'",
                      "email": "'$(git log -1 --format="%ae" $newrev)'"
                    }
                  }]
                }' || echo "‚ö†Ô∏è Failed to trigger CI/CD pipeline"
              
              echo "‚úÖ CI/CD pipeline triggered"
          fi
          
          # 2. Send notifications to team
          echo "üì¢ Sending team notifications"
          
          # Determine notification message based on branch
          if [[ $branch_name == "main" || $branch_name == "master" ]]; then
              notification_color="good"
              notification_text="üöÄ Production deployment triggered"
          elif [[ $branch_name == release/* ]]; then
              notification_color="warning"
              notification_text="üì¶ Release candidate updated"
          else
              notification_color="#36a64f"
              notification_text="üîß Development branch updated"
          fi
          
          # Send Slack notification
          curl -s -X POST "$SLACK_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d '{
              "channel": "#platform-team",
              "username": "Gitea Bot",
              "icon_emoji": ":git:",
              "attachments": [{
                "color": "'$notification_color'",
                "title": "Git Push: acme-corp/platform-services",
                "title_link": "https://gitea.acme-corp.com/acme-corp/platform-services/commit/'$newrev'",
                "text": "'$notification_text'",
                "fields": [
                  {
                    "title": "Branch",
                    "value": "'$branch_name'",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "'$commit_hash'",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "'$commit_author'",
                    "short": false
                  },
                  {
                    "title": "Message",
                    "value": "'$commit_msg'",
                    "short": false
                  }
                ],
                "footer": "Gitea Enterprise",
                "ts": '$(date +%s)'
              }]
            }' || echo "‚ö†Ô∏è Failed to send Slack notification"
          
          # 3. Update deployment status tracking
          echo "üìä Logging deployment metrics"
          
          # Log to central metrics system (example with InfluxDB)
          metrics_payload="gitea_push,repository=acme-corp/platform-services,branch=$branch_name,author=$(git log -1 --format='%ae' $newrev | sed 's/@.*//' | sed 's/[^a-zA-Z0-9]/_/g') value=1 $(date +%s)000000000"
          
          curl -s -X POST "https://metrics.acme-corp.com/write?db=gitops" \
            -H "Content-Type: text/plain" \
            -d "$metrics_payload" || echo "‚ö†Ô∏è Failed to log metrics"
          
          # 4. Generate compliance audit log
          echo "üìã Creating compliance audit entry"
          
          audit_entry='{
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "event_type": "git_push",
            "repository": "acme-corp/platform-services",
            "branch": "'$branch_name'",
            "commit_hash": "'$newrev'",
            "commit_message": "'$commit_msg'",
            "author": "'$commit_author'",
            "verified": '$(git verify-commit $newrev >/dev/null 2>&1 && echo true || echo false)',
            "deployment_triggered": '$(echo "$branch_name" | grep -qE "$DEPLOYMENT_BRANCHES" && echo true || echo false)'
          }'
          
          curl -s -X POST "https://audit.acme-corp.com/api/events" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $AUDIT_API_TOKEN" \
            -d "$audit_entry" || echo "‚ö†Ô∏è Failed to create audit log"
          
          echo "‚úÖ Post-receive processing completed for $refname"
      done
      
      echo "üéâ All post-receive workflows completed successfully"
      exit 0
      
  providerConfigRef:
    name: default
  managementPolicies: ["Observe", "Create", "Update", "Delete"]