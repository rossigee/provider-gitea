name: CI

on:
  push:
    branches:
      - master
      - release-*
  pull_request:
    branches:
      - master
      - release-*

env:
  GO_VERSION: '1.23'
  GOLANGCI_VERSION: 'v1.62.2'
  DOCKER_BUILDX_VERSION: 'v0.11.2'

jobs:
  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  lint:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go Dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          args: --timeout 10m

  check-diff:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-check-diff-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-check-diff-

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pkg-

      - name: Download Dependencies
        run: go mod download

      - name: Check Diff
        run: make check-diff

  unit-tests:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-unit-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-unit-tests-

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pkg-

      - name: Download Dependencies
        run: go mod download

      - name: Run Unit Tests
        run: make test

      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          flags: unittests
          file: ./coverage.out

  build:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-build-

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pkg-

      - name: Download Dependencies
        run: go mod download

      - name: Build
        run: make build

      - name: Build Docker Image
        run: make docker-build

      - name: Build Crossplane Package
        run: make xpkg.build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: provider-artifacts
          path: |
            _output/bin/
            _output/xpkg/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [detect-noop, build]
    if: needs.detect-noop.outputs.noop != 'true'
    services:
      gitea:
        image: gitea/gitea:latest
        ports:
          - 3000:3000
        env:
          INSTALL_LOCK: true
          SECRET_KEY: test-secret
          DISABLE_REGISTRATION: false
          REQUIRE_SIGNIN_VIEW: false
        options: >-
          --health-cmd="curl -f http://localhost:3000 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pkg-

      - name: Download Dependencies
        run: go mod download

      - name: Run Integration Tests
        env:
          GITEA_URL: http://localhost:3000
          GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        run: |
          go test -v ./test/integration/... -tags=integration

  publish-artifacts:
    runs-on: ubuntu-latest
    needs: [detect-noop, lint, check-diff, unit-tests, build]
    if: needs.detect-noop.outputs.noop != 'true' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: provider-artifacts
          path: _output/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}

      - name: Build and Push Docker Image
        run: |
          make docker-build
          docker tag crossplane/provider-gitea:latest ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest

      # TODO: Enable when registered with Upbound
      # - name: Upload Package to Registry
      #   if: startsWith(github.ref, 'refs/tags/')
      #   env:
      #     XPKG_ACCESS_ID: ${{ secrets.XPKG_ACCESS_ID }}
      #     XPKG_TOKEN: ${{ secrets.XPKG_TOKEN }}
      #   run: |
      #     make xpkg.push PACKAGE_REGISTRY=xpkg.upbound.io
      
      - name: Upload Package to GHCR
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Upload .xpkg file as OCI artifact to GHCR
          echo "Uploading Crossplane package to GHCR..."
          make xpkg.push PACKAGE_REGISTRY=ghcr.io/${{ github.repository_owner }}