name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  DOCKER_BUILDX_VERSION: 'v0.11.2'
  REGISTRY: ghcr.io

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Cache
        id: go
        run: echo "cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      - name: Cache the Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-release-${{ hashFiles('**/go.sum') }}

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}

      - name: Download Dependencies
        run: go mod download

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build Artifacts
        run: |
          make build VERSION=${{ steps.version.outputs.version }}
          make docker-build VERSION=${{ steps.version.outputs.version }}
          make xpkg.build VERSION=${{ steps.version.outputs.version }}

      - name: Tag and Push Docker Image
        run: |
          docker tag crossplane/provider-gitea:${{ steps.version.outputs.version }} ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.version.outputs.version }}
          docker tag crossplane/provider-gitea:${{ steps.version.outputs.version }} ${{ env.REGISTRY }}/${{ github.repository }}:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.version.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ github.repository }}:latest

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Extract changelog for this version
          CHANGELOG=$(awk '/^## \[${{ steps.version.outputs.version }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md || echo "Release ${{ steps.version.outputs.version }}")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.changelog }}
          files: |
            _output/bin/*
            _output/xpkg/*.xpkg
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Enable when registered with Upbound
      # - name: Upload Package to Upbound Registry
      #   if: "!contains(steps.version.outputs.version, '-')"
      #   env:
      #     XPKG_ACCESS_ID: ${{ secrets.XPKG_ACCESS_ID }}
      #     XPKG_TOKEN: ${{ secrets.XPKG_TOKEN }}
      #   run: |
      #     echo "Uploading package to Upbound registry..."
      #     make xpkg.push PACKAGE_REGISTRY=xpkg.upbound.io VERSION=${{ steps.version.outputs.version }}
      
      - name: Upload Package to GHCR
        if: "!contains(steps.version.outputs.version, '-')"
        run: |
          echo "Uploading Crossplane package to GHCR..."
          make xpkg.push PACKAGE_REGISTRY=ghcr.io/${{ github.repository_owner }} VERSION=${{ steps.version.outputs.version }}

      - name: Update Package Docs
        if: "!contains(steps.version.outputs.version, '-')"
        run: |
          echo "Package released successfully!"
          echo "ðŸŽ‰ Provider Gitea ${{ steps.version.outputs.version }} has been released!"
          echo "ðŸ“¦ Docker: ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.version.outputs.version }}"
          echo "ðŸ“¦ Package: Available on GitHub Container Registry (GHCR)"
          echo "ðŸ“¦ Install: kubectl crossplane install provider ghcr.io/${{ github.repository_owner }}/provider-gitea:${{ steps.version.outputs.version }}"