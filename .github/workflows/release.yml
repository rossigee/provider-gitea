# Official Provider-Workflows Release Template
# Uses crossplane-contrib/provider-workflows with GHCR registry
# Compatible with rossigee GHCR setup

name: Release (Official Workflows)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Custom release job to avoid submodule unshallow issues
  release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
          ref: ${{ github.event.inputs.version || github.ref_name }}

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Build and Publish
        run: |
          # Build binary
          make build

          # Build Docker image
          make do.build.images

          # Build Crossplane package
          make xpkg.build

          # Publish Docker image
          make img.release.publish.rossigee.provider-gitea

          # Publish Crossplane package
          make xpkg.release.publish.rossigee.provider-gitea

  # Create GitHub release
  github-release:
    needs: release
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

  # Verify publication
  verify-publication:
    needs: release
    runs-on: ubuntu-24.04
    steps:
      - name: Verify Publication
        run: |
          set -e

          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          PROVIDER_NAME="${{ github.event.repository.name }}"
          REGISTRY_PATH="ghcr.io/rossigee/${PROVIDER_NAME}"

          echo "Verifying publication to ${REGISTRY_PATH}:${VERSION}"

          # Wait a bit for publication to complete
          sleep 30

          # Verify version tag exists and is pullable
          if docker pull "${REGISTRY_PATH}:${VERSION}" > /dev/null 2>&1; then
            echo "✅ Verified container image ${VERSION}"
          else
            echo "❌ Failed to pull container image ${VERSION}"
            exit 1
          fi

          # Verify latest tag exists and is pullable
          if docker pull "${REGISTRY_PATH}:latest" > /dev/null 2>&1; then
            echo "✅ Verified container image latest"
          else
            echo "❌ Failed to pull container image latest"
            exit 1
          fi

          # Verify both tags point to same image (identical digests)
          VERSION_DIGEST=$(docker inspect "${REGISTRY_PATH}:${VERSION}" --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          LATEST_DIGEST=$(docker inspect "${REGISTRY_PATH}:latest" --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)

          if [ "$VERSION_DIGEST" = "$LATEST_DIGEST" ]; then
            echo "✅ Version and latest tags point to identical image"
            echo "   Digest: ${VERSION_DIGEST}"
          else
            echo "❌ Version and latest tags point to different images"
            echo "   Version digest: ${VERSION_DIGEST}"
            echo "   Latest digest:  ${LATEST_DIGEST}"
            exit 1
          fi

